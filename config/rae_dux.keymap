/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

#define BASE_L  0
#define NUM_L   1
#define SYM_L   2
#define SPECIAL_L   3

#define MEH(KEY) LS(LC(LA(LG(KEY))))

/ {
    macros {
        ZMK_MACRO(scope, wait-ms = <30>; tap-ms = <30>; bindings = <&kp COLON &kp COLON>;)
        ZMK_MACRO(lambda, wait-ms = <30>; tap-ms = <30>; bindings = <&kp L &kp A &kp M &kp B &kp D &kp A>;)
    };

    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
              combo_##NAME { \
                timeout-ms = <TIMEOUT>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
              };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */
        
        COMBO(caps_word_left, &caps_word, 13 14, 60)
    };

    behaviors {
        lhm: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            global-quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
            hold-trigger-key-positions = <5 6 7 8 9 10 11 12 13 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        };

        rhm: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            global-quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 16 17 18 19 20 21 22 23 24 30 31 32 33 34 35>;
        };

        base_lt: base_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BASE_LAYER_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            global-quick-tap-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        /*
        rpt_lt: repeat_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "REPEAT_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            global-quick-tap;
            bindings = <&mo>, <&key_repeat>;
        };
        */
    };

	keymap {
		compatible = "zmk,keymap";

		base_layer {
			bindings = <
                   &kp Q        &kp W         &kp F              &kp P              &kp B                &kp J              &kp L               &kp U                 &kp Y         &kp APOS
                   &lhm LALT A  &lhm LGUI R   &lhm LSHFT S       &lhm LCTRL T       &kp G                &kp K              &rhm LCTRL N        &rhm RSHFT E          &rhm LGUI I   &rhm RALT O
                   &kp Z        &kp X         &kp C              &kp D              &kp V                &kp M              &kp H               &kp COMMA             &kp DOT       &kp FSLH
			    	 /*&            &*/           &base_lt SPECIAL_L ESC    base_lt SYM_L TAB       &base_lt SYM_L SPC      &base_lt NUM_L RET  &base_lt NUM_L BSPC   &base_lt SPECIAL_L DEL  /*&             &*/
			>;
		};

		num_layer {
			bindings = <
                   &kp F1           &kp F2          &kp F3          &kp F4          &kp F5              &kp F6      &kp F7          &kp F8          &kp F9          &kp F10
                   &lhm LALT N1     &lhm LGUI N2    &lhm LSHFT N3   &lhm LCTRL N4   &kp N5              &kp N6      &rhm RCTRL N7   &rhm RSHFT N8   &rhm RGUI N9    &rhm RALT N0
                   &kp EXCL         &kp AT          &kp HASH        &kp DLLR        &kp PRCNT           &kp CARET   &kp AMPS        &kp APOS        &kp F11         &kp F12
				 /*&            &*/                 &trans          &trans          &trans              &trans      &trans          &trans                 /*&             &*/
			>;
		};

		sym_layer {
			bindings = <
                   &kp TILDE           &kp PLUS             &kp COLON           &kp UNDERSCORE          &trans                   &kp HOME          &kp PAGE_DOWN       &kp PAGE_UP      &kp END             &kp PIPE
                   &lhm LALT GRAVE     &lhm LGUI EQUAL      &lhm LSHFT SEMI     &sk LCTRL MINUS         &trans                   &kp LEFT          &rhm RCTRL DOWN     &rhm RSHFT UP    &rhm RGUI RIGHT     &rhm RALT ESC              
                   &trans              &kp LBRC             &kp LBKT            &kp LPAR                &trans                   &kp GT            &kp RPAR            &kp RBKT         &kp RBRC            &kp BACKSLASH
				 /*&            &*/           &trans        &trans             &trans                   &trans              &trans           &trans             /*&             &*/
			>;
		};

        special_layer {
            bindings = <
                &trans  &trans  &trans  &trans      &trans                      &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &caps_word  &trans                      &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans      &trans                      &trans  &trans  &trans  &trans  &trans
                                &trans  &trans      &trans                      &trans  &trans  &trans
            >;
        };
	};
};
